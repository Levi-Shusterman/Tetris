package RichardGui;

import java.awt.GridBagLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Enumeration;

import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.Timer;
import javax.swing.table.TableColumn;

public class TetrisPanel extends JPanel {

    private JTable table;
    private Layout model;
    private int currentRow = 0;
    private int blockHeight = 1;
    private int blockWidth = 1;
    private int rows = 20;
    private int cols = 10;

    public TetrisPanel() {
        model = new Layout();
        table = new JTable(model);
        table.setDefaultRenderer(Integer.class, new ChangeCell());
        table.setRowHeight(24);
        Enumeration<TableColumn> columns = table.getColumnModel().getColumns();
        while (columns.hasMoreElements()) {
            TableColumn column = columns.nextElement();
            column.setPreferredWidth(24);
            column.setMinWidth(24);
            column.setMaxWidth(24);
            column.setWidth(24);
        }
        setLayout(new GridBagLayout());
        add(table);

        Timer timer = new Timer(500, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                int col = (model.getColumnCount() - blockWidth) / 2;
                int row = currentRow - blockHeight;
                if (row + blockHeight >= model.getRowCount()) {
                    ((Timer) e.getSource()).stop();
                } else {
                    drawShape(row, col, 0);
                    currentRow++;
                    row = currentRow - blockHeight;
                    drawShape(row, col, 3);
                }

            }

            public void drawShape(int row, int col, int color) {

                for (int index = 0; index < blockHeight; index++) {

                    if (row >= 0 && row < model.getRowCount()) {

                        switch (index) {
                            case 0:
                            case 1:
                                model.setValueAt(color, row, col);
                                break;
                            case 2:
                                model.setValueAt(color, row, col);
                                model.setValueAt(color, row, col + 1);
                                model.setValueAt(color, row, col + 2);
                                break;
                        }

                    }
                    row++;

                }
            }
        });
        timer.setRepeats(true);
        timer.setCoalesce(true);
        timer.start();

    }
}
